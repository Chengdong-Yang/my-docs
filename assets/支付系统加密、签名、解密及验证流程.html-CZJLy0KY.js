import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,f as n,o as e}from"./app-DU0eqfwb.js";const a={};function l(o,s){return e(),t("div",null,s[0]||(s[0]=[n(`<h1 id="支付系统加密签名流程" tabindex="-1"><a class="header-anchor" href="#支付系统加密签名流程"><span>支付系统加密签名流程</span></a></h1><h3 id="加密、签名、解密、验证流程详细说明" tabindex="-1"><a class="header-anchor" href="#加密、签名、解密、验证流程详细说明"><span><strong>加密、签名、解密、验证流程详细说明</strong></span></a></h3><p>在支付系统中，敏感信息（如支付金额、账户信息等）必须加密传输，确保数据不被篡改。此外，为了验证发送方的身份，通常还会对数据进行数字签名，防止数据在传输过程中被修改。整个流程分为以下几步：</p><ol><li><strong>数据准备</strong></li><li><strong>加密（对称加密）</strong></li><li><strong>加密密钥保护（非对称加密）</strong></li><li><strong>生成数字签名</strong></li><li><strong>发送数据</strong></li><li><strong>接收方解密并验证签名</strong></li></ol><h3 id="步骤-1-数据准备" tabindex="-1"><a class="header-anchor" href="#步骤-1-数据准备"><span><strong>步骤 1：数据准备</strong></span></a></h3><p>假设商户 A 需要向支付系统发送一个支付请求。请求消息体包含敏感的交易信息，如支付金额、付款人账户等。</p><p><strong>例子</strong>：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">{</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;amount&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;1000.00&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;payerAccount&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;1234567890&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;orderId&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;ORD123456789&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;timestamp&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;2024-09-29T10:15:30Z&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一条支付请求，其中包含：</p><ul><li><strong>支付金额</strong>：1000.00 元</li><li><strong>付款人账户</strong>：1234567890</li><li><strong>订单号</strong>：ORD123456789</li><li><strong>时间戳</strong>：交易的发起时间</li></ul><p>这条消息包含了敏感的财务信息，必须加密处理。</p><h3 id="步骤-2-加密消息体-对称加密" tabindex="-1"><a class="header-anchor" href="#步骤-2-加密消息体-对称加密"><span><strong>步骤 2：加密消息体（对称加密）</strong></span></a></h3><p>为了保护敏感数据不被窃取或篡改，商户 A 生成一个 <strong>对称密钥</strong>（例如 AES 密钥），并使用它对消息体进行加密。对称加密算法的特点是：同一个密钥既用于加密，也用于解密。</p><p><strong>加密过程</strong>：</p><ul><li>商户 A 生成一个 256 位的 AES 密钥。</li><li>使用这个 AES 密钥对消息体进行加密。</li></ul><p><strong>加密后的消息体</strong>（假设）：</p><p><code>c29tZSBlbmNyeXB0ZWQgbWVzc2FnZQ== （加密后的 Base64 编码内容）</code></p><h3 id="步骤-3-加密密钥保护-非对称加密" tabindex="-1"><a class="header-anchor" href="#步骤-3-加密密钥保护-非对称加密"><span><strong>步骤 3：加密密钥保护（非对称加密）</strong></span></a></h3><p>由于对称密钥（AES 密钥）也属于敏感信息，因此不能直接传输。商户 A 使用 <strong>支付系统的公钥（非对称密钥）</strong> 对这个 AES 密钥进行加密。非对称加密的特点是：公钥加密，私钥解密。</p><p><strong>加密过程</strong>：</p><ul><li>使用支付系统的公钥加密 AES 密钥，得到加密后的对称密钥。</li><li>将加密后的对称密钥放在消息头部的 <code>EncKey</code> 字段中。</li></ul><p><strong>加密后的 AES 密钥</strong>（假设）：</p><p><code>R0lGODdhAQABAIAAAAUEBAAA... （用支付系统公钥加密后的密钥）</code></p><p><strong>EncSN</strong>：</p><ul><li><code>EncSN</code> 是加密序列号，用来标识支付系统的公钥。</li></ul><p><strong>EncKey</strong>：</p><ul><li><code>EncKey</code> 字段包含加密后的对称密钥，接收方将使用自己的私钥解密得到 AES 密钥，用于解密消息体。</li></ul><h3 id="步骤-4-生成数字签名" tabindex="-1"><a class="header-anchor" href="#步骤-4-生成数字签名"><span><strong>步骤 4：生成数字签名</strong></span></a></h3><p>为了验证消息的完整性和发送方的身份，商户 A 还需要对原始消息体进行数字签名。数字签名使用商户 A 的私钥生成，支付系统会使用商户 A 的公钥验证。</p><p><strong>签名过程</strong>：</p><ol><li>使用摘要算法（如 SHA-256）计算消息体的摘要（即消息的哈希值）。</li><li>使用商户 A 的私钥对摘要进行加密，生成数字签名。</li><li>将生成的签名放在消息头的 <code>SignSN</code> 字段中。</li></ol><p><strong>SignEncAlgo</strong>：</p><ul><li><code>SignEncAlgo</code> 指明使用的签名加密算法（例如 RSA）。</li><li><code>MDAlgo</code> 指明使用的消息摘要算法（如 SHA-256）。</li></ul><p><strong>签名示例</strong>（假设）：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">c2lnbmVkIGJ5IHByaXZhdGUga2V5  （使用商户 A 的私钥生成的数字签名）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="步骤-5-发送数据" tabindex="-1"><a class="header-anchor" href="#步骤-5-发送数据"><span><strong>步骤 5：发送数据</strong></span></a></h3><p>经过上述处理，商户 A 将以下数据发送给支付系统：</p><ul><li><strong>消息体（加密后的）</strong>：<code>c29tZSBlbmNyeXB0ZWQgbWVzc2FnZQ==</code></li><li><strong>加密的 AES 密钥（<strong><strong>EncKey</strong></strong>）</strong>：<code>R0lGODdhAQABAIAAAAUEBAAA...</code></li><li><strong>加密序列号（<strong><strong>EncSN</strong></strong>）</strong>：<code>SN123456</code></li><li><strong>数字签名（<strong><strong>SignSN</strong></strong>）</strong>：<code>c2lnbmVkIGJ5IHByaXZhdGUga2V5</code></li><li><strong>签名算法（<strong><strong>SignEncAlgo</strong></strong>）</strong>：<code>0</code>（表示 RSA）</li><li><strong>摘要算法（<strong><strong>MDAlgo</strong></strong>）</strong>：<code>SHA-256</code></li><li><strong>加密算法（<strong><strong>EncAlgo</strong></strong>）</strong>：<code>AES-256</code></li><li></li></ul><h3 id="步骤-6-接收方解密并验证签名" tabindex="-1"><a class="header-anchor" href="#步骤-6-接收方解密并验证签名"><span><strong>步骤 6：接收方解密并验证签名</strong></span></a></h3><p>支付系统收到上述数据后，按照以下步骤进行解密和验证。</p><h4 id="_6-1-解密密钥" tabindex="-1"><a class="header-anchor" href="#_6-1-解密密钥"><span><strong>6.1 解密密钥</strong></span></a></h4><p>支付系统使用自己的 <strong>私钥</strong> 解密消息头中的 <code>EncKey</code>，得到商户 A 使用的 <strong>AES 密钥</strong>。</p><h4 id="_6-2-解密消息体" tabindex="-1"><a class="header-anchor" href="#_6-2-解密消息体"><span><strong>6.2 解密消息体</strong></span></a></h4><p>支付系统使用解密得到的 AES 密钥和 <code>EncAlgo</code> 指定的算法（AES-256）解密消息体，恢复出原始的交易信息。</p><p><strong>解密后的消息体</strong>：</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">&quot;amount&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1000.00&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">&quot;payerAccount&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1234567890&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">&quot;orderId&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ORD123456789&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">&quot;timestamp&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;2024-09-29T10:15:30Z&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-3-验证签名" tabindex="-1"><a class="header-anchor" href="#_6-3-验证签名"><span><strong>6.3 验证签名</strong></span></a></h4><p>为了确保消息在传输过程中没有被篡改，支付系统需要验证商户 A 的数字签名。验证过程如下：</p><ol><li><p>使用 <code>MDAlgo</code>（SHA-256）对解密后的消息体计算摘要。</p></li><li><p>使用商户 A 的 <strong>公钥</strong> 对 <code>SignSN</code> 中的数字签名进行解密，得到商户 A 发送的摘要。</p></li><li><p>比较两个摘要是否一致。</p><ul><li>如果一致，说明消息未被篡改。</li><li>如果不一致，说明消息在传输过程中可能被修改。</li></ul></li></ol><hr><h3 id="完整的示例流程总结" tabindex="-1"><a class="header-anchor" href="#完整的示例流程总结"><span><strong>完整的示例流程总结</strong></span></a></h3><ol><li>商户 A 准备好支付请求消息，并生成一个 <strong>AES 密钥</strong> 对消息体进行加密。</li><li>商户 A 使用支付系统的 <strong>公钥</strong> 加密 AES 密钥，将加密后的密钥放入 <code>EncKey</code> 字段中。</li><li>商户 A 使用自己的 <strong>私钥</strong> 对消息体计算出的摘要进行签名，将签名结果放入 <code>SignSN</code> 字段中。</li><li>支付系统接收消息后，使用自己的 <strong>私钥</strong> 解密 <code>EncKey</code>，获取 AES 密钥。</li><li>支付系统使用 AES 密钥解密消息体，恢复原始的交易信息。</li><li>支付系统使用商户 A 的 <strong>公钥</strong> 验证数字签名，确保消息未被篡改。</li></ol><h3 id="总结-各个字段的作用" tabindex="-1"><a class="header-anchor" href="#总结-各个字段的作用"><span><strong>总结：各个字段的作用</strong></span></a></h3><ul><li><strong>EncSN</strong>：指示使用的密钥序列号，帮助支付系统找到对应的私钥解密 <code>EncKey</code>。</li><li><strong>EncKey</strong>：加密后的对称密钥（AES 密钥），用于解密消息体。</li><li><strong>SignSN</strong>：数字签名，确保消息的完整性和验证商户 A 的身份。</li><li><strong>SignEncAlgo</strong>：指定签名算法（如 RSA）。</li><li><strong>MDAlgo</strong>：指定消息摘要算法（如 SHA-256）。</li><li><strong>EncAlgo</strong>：指定加密算法（如 AES-256）。</li></ul><h3 id="提问-商户-a-的公钥和支付机构的公钥什么时候给的" tabindex="-1"><a class="header-anchor" href="#提问-商户-a-的公钥和支付机构的公钥什么时候给的"><span>提问：商户 a 的公钥和支付机构的公钥什么时候给的？</span></a></h3><p>以下是商户 A 与支付机构之间公钥交换的标准流程，帮助您理解密钥管理在系统初始化时如何进行：</p><h4 id="_3-1-商户-a-注册并建立密钥" tabindex="-1"><a class="header-anchor" href="#_3-1-商户-a-注册并建立密钥"><span><strong>3.1 商户 A 注册并建立密钥</strong></span></a></h4><ol><li><p><strong>商户 A 生成密钥对（公钥和私钥）</strong></p><ul><li>当商户 A 初次注册支付系统时，需要为自己生成一对 <strong>非对称密钥对（RSA 或 ECC）</strong>。</li><li>商户 A 生成自己的 <strong>私钥和公钥</strong>： <ul><li><strong>私钥</strong> 只能由商户 A 自己保管，永不外传。</li><li><strong>公钥</strong> 可以公开，用于支付机构验证商户 A 的签名。</li></ul></li></ul></li><li><p><strong>商户 A 将公钥提供给支付机构</strong></p><ul><li>商户 A 可以通过<strong>安全渠道</strong>（例如使用 HTTPS 上传、线下交付等）将公钥提供给支付机构。</li><li>支付机构将商户 A 的公钥保存在其数据库中，并与商户 A 的身份信息进行绑定。</li></ul></li><li><p><strong>支付机构将公钥证书提供给商户 A</strong></p><ul><li>支付机构通常使用 <strong>CA 证书（Certificate Authority）</strong> 来签发自己的公钥证书（<code>*.cer</code> 或 <code>*.pem</code> 格式）。</li><li>支付机构将公钥证书通过安全渠道（如 HTTPS 下载链接、线下交付等）提供给商户 A。</li><li>商户 A 将支付机构的公钥证书导入到其系统中，用于后续加密操作。</li></ul></li></ol>`,58)]))}const p=i(a,[["render",l],["__file","支付系统加密、签名、解密及验证流程.html.vue"]]),h=JSON.parse('{"path":"/techReview/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E5%8A%A0%E5%AF%86%E3%80%81%E7%AD%BE%E5%90%8D%E3%80%81%E8%A7%A3%E5%AF%86%E5%8F%8A%E9%AA%8C%E8%AF%81%E6%B5%81%E7%A8%8B.html","title":"技术积累","lang":"zh-CN","frontmatter":{"title":"技术积累","cover":"/assets/images/cover1.jpg","icon":"file","order":1,"author":"Ms.Hope","date":"2020-01-01T00:00:00.000Z","category":["技术积累"],"tag":["页面配置","使用指南"],"sticky":true,"star":true,"footer":"这是测试显示的页脚","copyright":"无版权","description":"支付系统加密签名流程 加密、签名、解密、验证流程详细说明 在支付系统中，敏感信息（如支付金额、账户信息等）必须加密传输，确保数据不被篡改。此外，为了验证发送方的身份，通常还会对数据进行数字签名，防止数据在传输过程中被修改。整个流程分为以下几步： 数据准备 加密（对称加密） 加密密钥保护（非对称加密） 生成数字签名 发送数据 接收方解密并验证签名 步骤 ...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/techReview/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E5%8A%A0%E5%AF%86%E3%80%81%E7%AD%BE%E5%90%8D%E3%80%81%E8%A7%A3%E5%AF%86%E5%8F%8A%E9%AA%8C%E8%AF%81%E6%B5%81%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"技术积累"}],["meta",{"property":"og:description","content":"支付系统加密签名流程 加密、签名、解密、验证流程详细说明 在支付系统中，敏感信息（如支付金额、账户信息等）必须加密传输，确保数据不被篡改。此外，为了验证发送方的身份，通常还会对数据进行数字签名，防止数据在传输过程中被修改。整个流程分为以下几步： 数据准备 加密（对称加密） 加密密钥保护（非对称加密） 生成数字签名 发送数据 接收方解密并验证签名 步骤 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://vuepress-theme-hope-docs-demo.netlify.app/assets/images/cover1.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-03T10:08:09.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://vuepress-theme-hope-docs-demo.netlify.app/assets/images/cover1.jpg"}],["meta",{"name":"twitter:image:alt","content":"技术积累"}],["meta",{"property":"article:author","content":"Ms.Hope"}],["meta",{"property":"article:tag","content":"页面配置"}],["meta",{"property":"article:tag","content":"使用指南"}],["meta",{"property":"article:published_time","content":"2020-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-03T10:08:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"技术积累\\",\\"image\\":[\\"https://vuepress-theme-hope-docs-demo.netlify.app/assets/images/cover1.jpg\\"],\\"datePublished\\":\\"2020-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-03T10:08:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ms.Hope\\"}]}"]]},"headers":[{"level":3,"title":"加密、签名、解密、验证流程详细说明","slug":"加密、签名、解密、验证流程详细说明","link":"#加密、签名、解密、验证流程详细说明","children":[]},{"level":3,"title":"步骤 1：数据准备","slug":"步骤-1-数据准备","link":"#步骤-1-数据准备","children":[]},{"level":3,"title":"步骤 2：加密消息体（对称加密）","slug":"步骤-2-加密消息体-对称加密","link":"#步骤-2-加密消息体-对称加密","children":[]},{"level":3,"title":"步骤 3：加密密钥保护（非对称加密）","slug":"步骤-3-加密密钥保护-非对称加密","link":"#步骤-3-加密密钥保护-非对称加密","children":[]},{"level":3,"title":"步骤 4：生成数字签名","slug":"步骤-4-生成数字签名","link":"#步骤-4-生成数字签名","children":[]},{"level":3,"title":"步骤 5：发送数据","slug":"步骤-5-发送数据","link":"#步骤-5-发送数据","children":[]},{"level":3,"title":"步骤 6：接收方解密并验证签名","slug":"步骤-6-接收方解密并验证签名","link":"#步骤-6-接收方解密并验证签名","children":[]},{"level":3,"title":"完整的示例流程总结","slug":"完整的示例流程总结","link":"#完整的示例流程总结","children":[]},{"level":3,"title":"总结：各个字段的作用","slug":"总结-各个字段的作用","link":"#总结-各个字段的作用","children":[]},{"level":3,"title":"提问：商户 a 的公钥和支付机构的公钥什么时候给的？","slug":"提问-商户-a-的公钥和支付机构的公钥什么时候给的","link":"#提问-商户-a-的公钥和支付机构的公钥什么时候给的","children":[]}],"git":{"createdTime":1727950089000,"updatedTime":1727950089000,"contributors":[{"name":"Yang chengdong","email":"1076964753@qq.com","commits":1}]},"readingTime":{"minutes":6.54,"words":1963},"filePathRelative":"techReview/支付系统加密、签名、解密及验证流程.md","localizedDate":"2020年1月1日","autoDesc":true}');export{p as comp,h as data};
